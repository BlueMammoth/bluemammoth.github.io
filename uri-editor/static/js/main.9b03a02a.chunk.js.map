{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","url","parameters","base","errors","query","URL","e","length","params","_","each","keyItem","valueItem","search","URLSearchParams","toString","console","error","className","onSubmit","this","bind","validate","render","handleSubmit","values","hasValidationErrors","name","component","placeholder","input","meta","hideLabels","keyInputPlaceholder","valueInputPlaceholder","rows","getURI","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAMqBA,G,kBAEjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,IAAY,GACZC,WAAY,IAJD,E,6GAakC,IAAD,IAA1CC,YAA0C,MAAnC,qBAAmC,EAC5CC,GAD4C,EAAbC,MACtB,IACb,GAAKF,EAID,IACI,IAAIG,IAAIH,GACV,MAAOI,GACLH,EAAOD,KAAO,wBANlBC,EAAOD,KAAO,qB,gCAY6B,IAAD,IAA1CA,YAA0C,MAAnC,qBAAmC,MAAbE,aAAa,MAAL,GAAK,EAC9C,IAAKF,EACD,MAAO,GAGX,IACI,IAAIF,EAAM,IAAIK,IAAIH,GAElB,GAAIE,EAAMG,OAAS,EAAG,CAClB,IAAIC,EAAS,GACbC,IAAEC,KAAKN,EAAO,YAA2B,IAAzBO,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UACrBJ,EAAOG,GAAWC,IAEtBZ,EAAIa,OAAS,IAAIC,gBAAgBN,GAAQO,WAG7C,OAAOf,EAAIe,WACb,MAAOT,GACLU,QAAQC,MAAMX,GAGlB,MAAO,K,+BAGD,IAAD,OACL,OACI,yBAAKY,UAAU,OACX,oDACA,kBAAC,IAAD,CACIC,SAAUC,KAAKD,SAASE,KAAKD,MAC7BE,SAAUF,KAAKE,SAASD,KAAKD,MAC7BG,OAAQ,gBAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,OAAQtB,EAAxB,EAAwBA,OAAQuB,EAAhC,EAAgCA,oBAAhC,OACJ,0BAAMP,SAAUK,GACZ,6BACI,2CACA,kBAAC,IAAD,CAAOG,KAAK,OAAOC,UAAU,QAAQC,YAAY,wBAErD,6BACA,6BACI,6CACA,kBAAC,IAAD,CACIF,KAAK,QACLJ,OAAQ,gBAAEO,EAAF,EAAEA,MAAF,EAASC,KAAT,OACJ,kBAAC,WAAD,eACIC,YAAU,EACVC,oBAAqB,iBACrBC,sBAAuB,kBACvBC,KAAM,CAAC,CACHxB,QAAW,GACXC,UAAW,MAEXkB,QAMnBJ,GAAuB,yBAAKR,UAAW,SAAUf,GAElD,yBAAKe,UAAW,WACVQ,GAAuB,EAAKU,OAAOX,a,GA1FpCY,cCMbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASpB,OAAO,kBAAC,EAAD,MAASqB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9b03a02a.chunk.js","sourcesContent":["import _ from 'lodash';\nimport React, {Component} from 'react';\nimport {Field, Form} from \"react-final-form\";\nimport {KeyValue} from 'react-key-value';\nimport './App.css';\n\nexport default class App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            url:        '',\n            parameters: '',\n        }\n    }\n\n    onSubmit() {\n\n    }\n\n\n    validate({base = 'http://example.com', query = []}) {\n        let errors = {};\n        if (!base) {\n            errors.base = 'Invalid base URI';\n        } else {\n\n            try {\n                new URL(base);\n            } catch (e) {\n                errors.base = 'Invalid base URI';\n            }\n        }\n        return;\n    }\n\n    getURI({base = 'http://example.com', query = []}) {\n        if (!base) {\n            return '';\n        }\n\n        try {\n            let url = new URL(base);\n\n            if (query.length > 0) {\n                let params = {};\n                _.each(query, ({keyItem, valueItem}) => {\n                    params[keyItem] = valueItem;\n                });\n                url.search = new URLSearchParams(params).toString();\n            }\n\n            return url.toString();\n        } catch (e) {\n            console.error(e);\n        }\n\n        return '';\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>URI Parameter editor</h1>\n                <Form\n                    onSubmit={this.onSubmit.bind(this)}\n                    validate={this.validate.bind(this)}\n                    render={({handleSubmit, values, errors, hasValidationErrors}) => (\n                        <form onSubmit={handleSubmit}>\n                            <div>\n                                <label>Base URI</label>\n                                <Field name=\"base\" component=\"input\" placeholder=\"http://example.com\"/>\n                            </div>\n                            <br/>\n                            <div>\n                                <label>Parameters</label>\n                                <Field\n                                    name=\"query\"\n                                    render={({input, meta}) => (\n                                        <KeyValue\n                                            hideLabels\n                                            keyInputPlaceholder={'Parameter name'}\n                                            valueInputPlaceholder={'Parameter value'}\n                                            rows={[{\n                                                keyItem:   '',\n                                                valueItem: ''\n                                            }]}\n                                            {...input}\n                                        />\n                                    )}\n                                />\n                            </div>\n\n                            {hasValidationErrors && <div className={\"error\"}>{errors}</div>}\n\n                            <div className={\"result\"}>\n                                {!hasValidationErrors && this.getURI(values)}\n                            </div>\n                        </form>\n                    )}/>\n            </div>\n        );\n    }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}